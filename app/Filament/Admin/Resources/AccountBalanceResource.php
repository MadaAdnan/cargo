<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\AccountBalanceResource\Pages;
use App\Filament\Admin\Resources\AccountBalanceResource\RelationManagers;
use App\Models\AccountBalance;
use App\Models\Balance;
use App\Models\User;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use pxlrbt\FilamentExcel\Actions\Tables\ExportAction;
use pxlrbt\FilamentExcel\Exports\ExcelExport;

class AccountBalanceResource extends Resource
{
    protected static ?string $model = Balance::class;
    protected static ?string $navigationGroup = 'الحسابات المالية';
    protected static ?string $label = 'حركة الحسابات المالية';
    protected static ?string $pluralLabel = 'حركة الحسابات المالية';
    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function canCreate(): bool
    {
        return false; //parent::canCreate(); // TODO: Change the autogenerated stub
    }

    public static function canEdit(Model $record): bool
    {
        return false; //parent::canEdit($record); // TODO: Change the autogenerated stub
    }

    public static function canDelete(Model $record): bool
    {
        return false;// parent::canDelete($record); // TODO: Change the autogenerated stub
    }

    public static function canDeleteAny(): bool
    {
        return false;// parent::canDeleteAny(); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([

            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->modifyQueryUsing(fn($query)=>$query->whereHas('account')->latest())
            ->columns([
                Tables\Columns\TextColumn::make('debit')->label('المدفوعات'),
                Tables\Columns\TextColumn::make('credit')->label('المقبوضات'),
                Tables\Columns\TextColumn::make('account.name')->label('الحساب'),
                Tables\Columns\TextColumn::make('customer_name')->label('الحساب المقابل'),
                Tables\Columns\TextColumn::make('total')->label('الرصيد'),
                Tables\Columns\TextColumn::make('info')->label('البيان'),
                Tables\Columns\TextColumn::make('created_at')->date('Y-m-d')->label('التاريخ'),

            ])
            ->headerActions([
                ExportAction::make()->exports([
                    ExcelExport::make()->withChunkSize(100)->fromTable()
                ])
            ])
            ->filters([
                Tables\Filters\Filter::make('filter')->form([
                    Forms\Components\Select::make('user_id')->options(User::accounts()->pluck('name','id'))->label('الحساب'),
                    Forms\Components\DatePicker::make('from')->label('من تاريخ'),
                    Forms\Components\DatePicker::make('to')->label('إلى تاريخ'),
                ])->query(function($query,$data){
                    return $query->when($data['user_id'],fn($query,$date)=>$query->where('user_id',$date))
                        ->when(
                            $data['from'],
                            fn(Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
                        )
                        ->when(
                            $data['to'],
                            fn(Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
                        );
                })
            ])
            ->actions([
                Tables\Actions\EditAction::make()->visible(fn($record)=>$record->uuid==null),
                Tables\Actions\Action::make('complete')->action(function($record){
                    try{
                        Balance::where('uuid',$record->uuid)->update(['is_complete'=>true,'pending'=>false]);
                      //  $record->update(['is_complete'=>true,'pending'=>false]);
                        Notification::make('success')->success()->title('نجاح العملية')->body(' تم تأكيد الدفعة بنجاح')->send();

                    }catch (\Exception | \Error $e){
                        Notification::make('error')->danger()->title('فشلت العملية')->body($e->getMessage())->send();
                    }
                })
                    ->label('تأكيد دفع المصاريف')->requiresConfirmation()->visible(fn($record)=>$record->uuid!=null && $record->is_complete==false)->button(),

                Tables\Actions\Action::make('cancel')->action(function($record){
                    try{
                        Balance::where('uuid',$record->uuid)->delete();
                        Notification::make('success')->success()->title('نجاح العملية')->body(' تم إلغاء الدفعة بنجاح')->send();
                    }catch (\Exception | \Error $e){
                        Notification::make('error')->danger()->title('فشلت العملية')->body($e->getMessage())->send();
                    }
                })->label('إلغاء الدفعة')->requiresConfirmation()
                    ->visible(fn($record)=>$record->uuid!=null && $record->is_complete==false)->button(),

            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListAccountBalances::route('/'),
            'create' => Pages\CreateAccountBalance::route('/create'),
            'edit' => Pages\EditAccountBalance::route('/{record}/edit'),
        ];
    }
}
