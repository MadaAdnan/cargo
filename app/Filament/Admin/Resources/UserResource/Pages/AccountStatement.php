<?php

namespace App\Filament\Admin\Resources\UserResource\Pages;

use App\Filament\Admin\Resources\UserResource;
use App\Helper\HelperBalance;
use App\Models\Balance;
use App\Models\User;
use DB;
use Filament\Resources\Pages\Page;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Concerns\InteractsWithTable;
use Filament\Tables\Contracts\HasTable;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Table;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\Relation;
use Illuminate\Pagination\LengthAwarePaginator;

class AccountStatement extends Page implements HasTable
{
    use InteractsWithTable;

    protected static string $resource = UserResource::class;

    protected static string $view = 'filament.admin.resources.user-resource.pages.account-statement';
    protected $recordId;
    public $record;
    public $currencyId;
    public $isPending;
public function getTitle(): string|Htmlable
{
    $cur=$this->currencyId==1?'USD':'TRY';
    $p=$this->isPending==false?'':'قيد التحصيل';
    return "كشف حساب /".$this->record->name .'/'.$cur . '/'.$p; // TODO: Change the autogenerated stub
}

    public function mount($record, $currency, $pending): void
    {
        $this->isPending = $pending;
        $this->recordId = $record;
        $this->currencyId = $currency;
        $this->record = User::find($record);
    }


    // إعداد أعمدة الجدول
    public function table(Table $table): Table
    {
        return $table
            ->query(fn() => Balance::where([
                'user_id' => $this->recordId,
                'currency_id' => $this->currencyId,
                'is_complete' => true,
                'pending' => $this->isPending,
            ])/*->select(
                '*',
                DB::raw('SUM(credit - debit) OVER (ORDER BY id) AS balance')
            )*/
                ->orderBy('id'))->paginated()
            ->columns([
                TextColumn::make('credit')->label('دائن')->formatStateUsing(fn($state) => HelperBalance::formatNumber($state)),
                TextColumn::make('debit')->label('مدين')->formatStateUsing(fn($state) => HelperBalance::formatNumber($state)),
                TextColumn::make('id')->label('مدين') ->formatStateUsing(function ($record) {
                    static $runningTotal = 0;
                    $runningTotal += $record->credit - $record->debit;
                    return $runningTotal;
                }),

                TextColumn::make('info')->label('الملاحظات'),
                TextColumn::make('customer_name')->label('الطرف المقابل'),
                TextColumn::make('order.code')->label('الطلب'),
                TextColumn::make('order.sender.name')->label('المرسل')->description(fn($record) => $record->order?->general_sender_name != null ? "{$record->order->general_sender_name}" : ""),
                TextColumn::make('order.receive.name')->label('المستلم')->description(fn($record) => $record->order?->global_name != null ? " {$record->order->global_name}" : ""),

                TextColumn::make('total')->label('الرصيد')->formatStateUsing(fn($state) => HelperBalance::formatNumber($state)),

                //H: get date and time and split them using two temporary columns
                TextColumn::make('created_at_date')
                    ->state(function (Model $rec) {
                        return \Carbon\Carbon::parse($rec->created_at)->format('Y-m-d');
                    })
                    ->label('التاريخ'),

                TextColumn::make('created_at_time')
                    ->state(function (Model $rec) {
                        return \Carbon\Carbon::parse($rec->created_at)->format('h:i:s');
                    })
                    ->label('التوقيت'),
            ]);
    }

    protected function getHeaderWidgets(): array
    {
        return [UserResource\Widgets\BalanceView::make(['record' => $this->record])]; // TODO: Change the autogenerated stub
    }
}
