<?php

namespace App\Filament\Admin\Resources;

use App\Enums\ActivateStatusEnum;
use App\Enums\FarType;
use App\Enums\LevelUserEnum;
use App\Enums\OrderStatusEnum;
use App\Enums\OrderTypeEnum;
use App\Enums\TaskAgencyEnum;
use App\Filament\Admin\Resources\CanceledOrderResource\Pages;
use App\Filament\Admin\Resources\CanceledOrderResource\RelationManagers;
use App\Helper\HelperBalance;
use App\Models\CanceledOrder;
use App\Models\City;
use App\Models\Order;
use App\Models\User;
use BezhanSalleh\FilamentShield\Contracts\HasShieldPermissions;
use Carbon\Carbon;
use Filament\Forms;
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\SpatieMediaLibraryFileUpload;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use pxlrbt\FilamentExcel\Actions\Tables\ExportAction;
use pxlrbt\FilamentExcel\Exports\ExcelExport;

class CanceledOrderResource extends Resource implements HasShieldPermissions
{
    protected static ?string $model = Order::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';
    protected static ?string $pluralModelLabel = 'الطلبات';

    protected static ?string $label = 'شحنة منتهية';
    protected static ?string $navigationLabel = 'شحنات منتهية';
    protected static ?string $navigationGroup = 'الشحنات';
    protected static ?int $navigationSort = 4;
    protected static ?string $slug = 'canceled-orders';

    public static function getPermissionPrefixes(): array
    {
        return [
            'view',
            'view_any',
            'create',
            'update',
            'delete',
            'delete_any',
            'publish'
        ];
    }
    public static function canAccess(): bool
    {
        return auth()->user()->hasPermissionTo('view_canceled::order');
    }

    public static function canCreate(): bool
    {
        return auth()->user()->hasPermissionTo('view_canceled::order'); // TODO: Change the autogenerated stub
    }

    public static function canEdit(Model $record): bool
    {
        return auth()->user()->hasPermissionTo('update_canceled::order');
    }

    public static function canDelete(Model $record): bool
    {
        return auth()->user()->hasPermissionTo('delete_canceled::order');
    }

    public static function canDeleteAny(): bool
    {
        return auth()->user()->hasPermissionTo('delete_canceled::order');
    }

    public static function form(Form $form): Form
    {
        $shipping = Order::latest()->first()?->shipping_date;
        $date = now()->format('Y-m-d');
        if ($shipping != null) {
            try {
                $date = Carbon::parse($shipping)->format('Y-m-d');
            } catch (\Exception | \Error $e) {
            }
        }
        return $form
            ->schema([


                Forms\Components\Section::make('معلومات الطلب')->schema([
                    //                    SpatieMediaLibraryFileUpload::make('images')->collection('images')->label('أرفق صور')->imageEditor(),
                    Forms\Components\Fieldset::make('المرسل')->schema([
                        Forms\Components\Grid::make(2)
                            ->schema([

                                Forms\Components\Select::make('type')->options([
                                    OrderTypeEnum::HOME->value => OrderTypeEnum::HOME->getLabel(),
                                    OrderTypeEnum::BRANCH->value => OrderTypeEnum::BRANCH->getLabel(),

                                ])->label('نوع الطلب')
                                    ->required()
                                    ->default(OrderTypeEnum::HOME->value)
                                    ->reactive(),

                                Forms\Components\Select::make('sender_id')
                                    ->relationship('sender', 'name', fn($query) => $query->active())
                                    ->label('معرف المرسل')->required()
                                    ->afterStateUpdated(function ($state, $set) {
                                        $user = User::active()->with('city')->find($state);
                                        $branch = User::active()->where(['level' => LevelUserEnum::BRANCH->value, 'branch_id' => $user->branch_id])->first()?->id;
                                        if ($user) {
                                            $set('sender_phone', $user?->phone);
                                            $set('sender_address', $user?->address);
                                            $set('city_source_id', $user?->city_id);
                                            $set('pick_id', $branch);
                                        }
                                    })->live()->visible(fn($context) => $context === 'create')
                                    ->searchable()
                                    ->noSearchResultsMessage('الاسم غير موجود')
                                    ->suffixAction(
                                        Action::make('copyCostToPrice')->label('إضافة مستخدم جديد')
                                            ->icon('fas-user-plus')
                                            ->form(function () {
                                                $max = User::max('id') + 1;

                                                return [
                                                    Forms\Components\Grid::make()->schema([
                                                        Forms\Components\TextInput::make('name')->label('الاسم')->required(),
                                                        Forms\Components\TextInput::make('email')->label('البريد الالكتروني')->email()->required()->unique(table: 'users', column: 'email')->default('user' . $max . '@gmail.com'),
                                                    ]),
                                                    Forms\Components\Grid::make()->schema([
                                                        Forms\Components\TextInput::make('username')->label('username')
                                                            ->unique(table: 'users', column: 'username')->required()->default('user' . $max),
                                                        Forms\Components\TextInput::make('password')->password()->dehydrateStateUsing(fn($state) => Hash::make($state))
                                                            ->label('كلمة المرور')->revealable()->required()->default(12345),

                                                    ]),

                                                    Forms\Components\Grid::make(2) // تقسيم الحقول إلى صفين
                                                        ->schema([
                                                            Forms\Components\TextInput::make('phone_number')
                                                                ->label('رقم الهاتف')
                                                                ->placeholder('1234567890')
                                                                ->numeric() // التأكد أن الحقل يقبل الأرقام فقط
                                                                ->maxLength(15)
                                                                ->extraAttributes(['style' => 'text-align: left; direction: ltr;'])
                                                                ->tel()
                                                                ->telRegex('/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.\/0-9]*$/'), // تخصيص عرض حقل الرمز ومحاذاة النص لليسار
                                                            //H: Made phone number not required to complete account registration while creating an order
                                                            //->required(),

                                                            Forms\Components\TextInput::make('country_code')
                                                                ->label('رمز الدولة')
                                                                ->placeholder('963')
                                                                ->prefix('+')
                                                                ->maxLength(3)
                                                                ->numeric()
                                                                ->extraAttributes(['style' => 'text-align: left; direction: ltr; width: 100px;']), // تخصيص عرض حقل الرمز ومحاذاة النص لليسار
                                                            // تحديد الحد الأقصى للأرقام (بما في ذلك +)
                                                            //H: Made phone number not required to complete account registration while creating an order
                                                            //->required(),
                                                        ]),
                                                    Forms\Components\Grid::make()->schema([
                                                        Forms\Components\Textarea::make('address')->label('العنوان التفصيلي'),
                                                        Forms\Components\Select::make('city_id')->options(City::where('is_main', false)->pluck('name', 'id'))->required()
                                                            ->label('البلدة/البلدة')
                                                            ->searchable(),

                                                    ]),

                                                    Forms\Components\Grid::make()->schema([
                                                        Forms\Components\TextInput::make('full_name')->label('الاسم الكامل'),
                                                        Forms\Components\DatePicker::make('birth_date')->label('تاريخ الميلاد')
                                                            ->format('Y-m-d')->default(now()),

                                                    ]),


                                                ];
                                            })
                                            ->action(function ($set, $data) {
                                                try {
                                                    $data['level'] = LevelUserEnum::USER->value;
                                                    $data['branch_id'] = City::find($data['city_id'])?->branch_id;
                                                    $data['status'] = ActivateStatusEnum::ACTIVE->value;
                                                    $data['phone'] = '+' . $data['country_code'] . $data['phone_number'];
                                                    unset($data['country_code'], $data['phone_number']);
                                                    while (true) {
                                                        $code = \Str::random(8);

                                                        $user = User::where('num_id', $code)->first();
                                                        if (!$user) {
                                                            $data['num_id'] = $code;
                                                            break;
                                                        }
                                                    }

                                                    $userNew = User::create($data);
                                                    $set('sender_id', $userNew->id);
                                                    $set('sender_name', $userNew->name);
                                                    $set('sender_address', $userNew->address);
                                                    $set('sender_phone', $userNew->phone);
                                                    Notification::make('success')->title('نجاح العملية')->body("تم إضافة المستخدم بنجاح IBAN:{$userNew->iban}")->success()->send();
                                                } catch (\Exception | \Error $e) {
                                                    Notification::make('error')->title('فشل العملية')->body($e->getMessage())->danger()->send();
                                                }
                                            })
                                        //
                                    ),

                            ]),

                        Forms\Components\Grid::make()->schema([
                            Forms\Components\Select::make('city_source_id')
                                ->relationship('citySource', 'name')
                                ->label('من بلدة')->reactive()->required()->searchable(),
                            Forms\Components\TextInput::make('general_sender_name')->label('اسم المرسل'),


                        ]),
                        Forms\Components\Grid::make()->schema([


                            Forms\Components\TextInput::make('sender_phone')->label('رقم هاتف المرسل')->required(),
                            //H: disabled required for sender address in order creation panel
                            Forms\Components\TextInput::make('sender_address')->label('عنوان المرسل'),
                            //->required(),
                        ]),


                    ]),

                    Forms\Components\Fieldset::make('المستلم')->schema([
                        Forms\Components\Grid::make()->schema([
                            Forms\Components\Select::make('receive_id')->label('معرف المستلم')->default(fn() => User::active()->where('email', 'zab@gmail.com')->first()?->id)
                                ->options(User::active()->where('level', LevelUserEnum::USER->value)->pluck('name', 'id')->toArray())->searchable()
                                ->afterStateUpdated(function ($state, $set) {
                                    $user = User::with('city')->find($state);
                                    if ($user) {
                                        $set('receive_phone', $user?->phone);
                                        $set('receive_address', $user?->address);

                                        $set('sender_name', $user?->name);
                                        $set('city_target_id', $user?->city_id);
                                    }
                                })->live()->visible(fn($context) => $context === 'create'),
                            Forms\Components\Select::make('city_target_id')
                                ->relationship('cityTarget', 'name')
                                ->label('الى بلدة')->required()->searchable(),

                        ]),
                        Forms\Components\Grid::make()->schema([
                            Forms\Components\TextInput::make('receive_address')->label('عنوان المستلم'),
                            Forms\Components\TextInput::make('receive_phone')->label('هاتف المستلم'),

                        ]),
                        Forms\Components\Grid::make()->schema([
                            Forms\Components\TextInput::make('global_name')->label('اسم المستلم'),

                        ]),

                    ]),

                    Forms\Components\Fieldset::make('معلومات الشحنة')->schema([
                        Forms\Components\Grid::make()->schema([
                            Forms\Components\Select::make('weight_id')
                                ->relationship('weight', 'name')
                                ->label('الوزن')->searchable()->preload(),

                            Forms\Components\Select::make('size_id')
                                ->relationship('size', 'name')
                                ->label('الحجم')->searchable()->preload(),
                        ]),

                        Forms\Components\Grid::make()->schema([
                            Forms\Components\Select::make('unit_id')
                                ->relationship('unit', 'name')->label('الوحدة')->required(),
                            Forms\Components\TextInput::make('note')->label('ملاحظات')
                        ]),
                        Forms\Components\Grid::make(1)->schema([
                            Forms\Components\DatePicker::make('shipping_date')->required()->label('تاريخ الشحنة')->default($date),
                        ]),
                    ]),
                    Forms\Components\Fieldset::make('الأجور')->schema([
                        Forms\Components\Grid::make(2)->schema([
                            Forms\Components\TextInput::make('price')->numeric()->label('التحصيل دولار')->default(0)->columnSpan(3)->visible(fn($context) => $context == 'create'),
                            Forms\Components\TextInput::make('far')->numeric()->label('أجور الشحن دولار')->default(0)->columnSpan(3)->visible(fn($context) => $context == 'create'),

                        ])->columnSpan(2),
                        Forms\Components\Grid::make(2)->schema([
                            Forms\Components\TextInput::make('price_tr')->numeric()->label('التحصيل تركي')->default(0)->columnSpan(3)->visible(fn($context) => $context == 'create'),
                            Forms\Components\TextInput::make('far_tr')->numeric()->label('أجور الشحن تركي')->default(0)->columnSpan(3)->visible(fn($context) => $context == 'create'),

                        ])->columnSpan(2),
                        Forms\Components\Grid::make()->schema([

                            Forms\Components\Select::make('pick_id')->label('الموظف الملتقط')->options(User::where('level', LevelUserEnum::BRANCH->value)->orWhere('level', LevelUserEnum::STAFF->value)->orWhere('level', LevelUserEnum::ADMIN->value)->pluck('name', 'id'))->searchable()->required()->visible(fn($context) => $context === 'create'),

                        ]),

                        Forms\Components\Grid::make()->schema([
                            Forms\Components\Radio::make('far_sender')
                                ->options([
                                    true => 'المرسل',
                                    false => 'المستلم'
                                ])->required()->default(false)->inline(false)
                                ->label('أجور الشحن على')->visible(fn($context) => $context === 'create'),

                            Forms\Components\TextInput::make('canceled_info')
                                ->hidden(fn(Forms\Get $get): bool => !$get('active'))->live()
                                ->label('سبب الارجاع في حال ارجاع الطلب')->visible(fn($context) => $context === 'create'),
                        ])->visible(fn($context) => $context === 'create'),
                    ])->columns(4),

                    Forms\Components\Fieldset::make('كود الشحنة')
                        ->schema([
                            Forms\Components\Toggle::make('allow_duplicates')
                                ->label('الشحنة مكودة')
                                ->default(true)
                                ->reactive()
                                ->dehydrated(false),
                            Forms\Components\TextInput::make('qr_code')
                                ->label('الكود')
                                ->rule(
                                    fn(callable $get) => $get('allow_duplicates')
                                        ? ['required', 'string', 'max:255', 'unique:orders,qr_code']
                                        : ['nullable', 'string', 'max:255']
                                )
                                ->columnSpan(1),
                        ])
                        ->columns(1),
                ])->collapsible(true)->collapsed(false),


                //
                Forms\Components\Section::make('محتويات الطلب')
                    ->schema([

                        Forms\Components\Grid::make()->schema([
                            Forms\Components\Repeater::make('packages')->relationship('packages')->schema([
                                SpatieMediaLibraryFileUpload::make('package')->label('صورة الشحنة')->collection('packages'),
                                Forms\Components\TextInput::make('info')->label('معلومات الشحنة'),
                                Forms\Components\TextInput::make('quantity')->numeric()->label('الكمية'),
                            ])
                                ->label('محتويات الطلب')
                                ->addable(false)
                                ->deletable(false)->columnSpan(2)
                                ->collapsible()
                                ->collapsed(),
                        ]),


                    ])->collapsible(true)->collapsed(true),
                Forms\Components\Section::make('سلسلة التوكيل')
                    ->schema([
                        Forms\Components\Repeater::make('agencies')->relationship('agencies')
                            ->schema([

                                Forms\Components\Select::make('user_id')->options(User::active()->where(
                                    fn($query) => $query->where('level', LevelUserEnum::STAFF->value)
                                )->pluck('name', 'id'))->label('الموظف')->searchable(),
                                Forms\Components\Radio::make('status')->options([
                                    TaskAgencyEnum::TASK->value => TaskAgencyEnum::TASK->getLabel(),
                                    TaskAgencyEnum::TRANSPORT->value => TaskAgencyEnum::TRANSPORT->getLabel(),

                                ])->label('المهمة'),
                                Forms\Components\TextInput::make('task')->label('المهمة المطلوب تنفيذها'),

                            ])->defaultItems(2)
                            ->deletable(true)
                            ->addActionLabel('إضافة مهمة')
                            ->label('المهام')
                            ->itemLabel(fn(array $state): ?string => $state['package_name'] ?? ' مهمة...')->columnSpan(2), //
                        // استخدام اسم الشحنة كتسمية


                    ])->collapsible(true)->collapsed(true)->visible(false),


            ]);
    }

    public static function table(Table $table): Table
    {
        $users = User::active()->selectRaw('id,name')->get();
        $cities = City::selectRaw('id,name,city_id')->get();

        return $table
            //            ->poll(10)
            ->columns([
                //  Tables\Columns\SpatieMediaLibraryImageColumn::make('images')->collection('images')->circular()->openUrlInNewTab(),
                /*   PopoverColumn::make('qr_url')
                       ->trigger('click')
                       ->placement('right')
                       ->content(fn($record) => \LaraZeus\Qr\Facades\Qr::render($record->code))
                       ->icon('heroicon-o-qr-code'),*/

                Tables\Columns\TextColumn::make('id')->description(fn($record) => $record->qr_code, 'above')->copyable()->searchable()->extraCellAttributes(fn(Model $record) => match ($record->color) {
                    'green' => ['style' => 'background-color:#55FF88;'],

                    default => ['style' => ''],
                }),

                Tables\Columns\TextColumn::make('shipping_date')->date('y-m-d')->label('تاريخ الشحنة')->description(fn($record) => $record->created_at, 'above')->copyable()->searchable()->extraCellAttributes(fn(Model $record) => match ($record->color) {
                    'green' => ['style' => 'background-color:#55FF88;'],

                    default => ['style' => ''],
                }),
                Tables\Columns\TextColumn::make('createdBy.name')->label('الموظفون')
                    ->formatStateUsing(fn($state) => 'المنشأ : ' . $state)
                    ->description(fn($record) => 'المعدل : ' . $record?->updatedBy?->name, 'bottom'),


                Tables\Columns\TextColumn::make('far_sender')
                    ->formatStateUsing(fn($state) => FarType::tryFrom($state)?->getLabel())
                    ->color(fn($state) => FarType::tryFrom($state)?->getColor())
                    ->icon(fn($state) => FarType::tryFrom($state)?->getIcon())
                    ->label('حالة الدفع')
                    ->description(fn($record) => $record->status?->getLabel())
                    ->extraCellAttributes(function ($record) {
                        $list = [];
                        switch ($record->status) {
                            case OrderStatusEnum::PICK:
                                $list = ['style' => 'background-color:yellow'];
                                break;
                            case OrderStatusEnum::TRANSFER:
                                $list = ['style' => 'background-color:orange'];
                                break;
                            case OrderStatusEnum::RETURNED:
                                $list = ['style' => 'background-color:red'];
                                break;
                            case OrderStatusEnum::CANCELED:
                                $list = ['style' => 'background-color:gray;color:black'];
                                break;
                            case OrderStatusEnum::SUCCESS:
                                $list = ['style' => 'background-color:green;color:black'];
                                break;
                        }
                        return $list;
                    }),
                // Tables\Columns\TextColumn::make('far_sender')->formatStateUsing(fn($state) => FarType::tryFrom($state)?->getLabel())
                //     ->color(fn($state) => FarType::tryFrom($state)?->getColor())
                //     ->icon(fn($state) => FarType::tryFrom($state)?->getIcon())
                //     ->label('حالة الدفع')
                //     ->description(fn($record) => $record->created_at->diffForHumans())
                //     ->searchable(),

                Tables\Columns\TextColumn::make('unit.name')->label('نوع الشحنة')->toggleable(isToggledHiddenByDefault: false),

                Tables\Columns\TextColumn::make('far')->formatStateUsing(fn($state) => 'الاجور : ' . $state)->label('USD')
                    ->description(fn($record) => 'التحصيل : ' . $record->price, 'above')
                    ->toggleable(isToggledHiddenByDefault: false)/*->description(fn($record) => 'اجور الشحن : ' . $record->far . ' $ ')*/,

                Tables\Columns\TextColumn::make('far_tr')->formatStateUsing(fn($state) => 'الاجور : ' . $state)->label('TRY')
                    ->description(fn($record) => 'التحصيل : ' . $record->price_tr, 'above')
                    ->toggleable(isToggledHiddenByDefault: false),


                Tables\Columns\TextColumn::make('currency.name')->label('العملة')->toggleable(isToggledHiddenByDefault: false),

                Tables\Columns\TextColumn::make('sender.name')->label('المرسل')->searchable()->toggleable(isToggledHiddenByDefault: false),
                Tables\Columns\TextColumn::make('global_name')->label('المستلم')->searchable()->toggleable(isToggledHiddenByDefault: false),
                Tables\Columns\TextColumn::make('citySource.name')
                    ->label('بلدة')
                    ->formatStateUsing(fn($state, $record) => 'من : ' . $record->citySource?->name . ' ( ' . $record->citySource?->city?->name . ' )')
                    ->description(fn($record) => "إلى : {$record->cityTarget?->name} ( {$record->cityTarget?->city?->name} )")
                    ->searchable(query: function (Builder $query, string $search) {
                        $query->whereHas('citySource', function ($q) use ($search) {
                            $q->where('name', 'like', "%{$search}%");
                        });
                    })
                    ->toggleable(isToggledHiddenByDefault: false),
                Tables\Columns\TextColumn::make('branchSource.name')->label('فرع')->formatStateUsing(fn($state) => 'من : ' . $state)->description(fn($record) => "إلى : {$record->branchTarget?->name}")->searchable()->toggleable(isToggledHiddenByDefault: false),


                Tables\Columns\TextColumn::make('receive_phone')->toggleable(isToggledHiddenByDefault: false)
                    ->formatStateUsing(fn($record) => (string)$record->receive_address . ' - ' . (string)$record->receive_phone)->label('هاتف المستلم ')
                    /*->description(fn($record) =>  ltrim($record?->receive_phone, '+'))*/
                    ->url(function ($record) {
                        $far = $record->far_sender ? 'على المرسل' : 'على المستلم';

                        $message = "السلام عليكم ورحمة الله وبركاته
                        %0a
                         لكم طلب مرسل عبر شركة الفاتح للنقل الداخلي
                         %0a
                           من : {$record->sender?->full_name}
                           %0a
                            إلى : {$record->global_name}
                       %0a
                        قيمة الطلب : {$record->price}
                        %0a
                        أجور الطلب : {$record->far}
                        %0a
                        الأجور : {$far}
                        %0a
                        يرجى تأكيد حضوركم وإرسال عنوان دقيق ليتم تسليمكم الطلب فيه مع إرفاق رقم البناء والشقة وإرفاق موقع GPS لتسريع الوصول للعنوان
                          %0a
                         ملاحظة : سيتم التوزيع خلال أقرب فرصة ممكنة إن شاء الله ";
                        return url('https://wa.me/' . ltrim($record?->receive_phone, '+') . '?text=' . $message);
                    })->openUrlInNewTab()
                    ->searchable()->color('danger'),
                Tables\Columns\TextColumn::make('pick.name')->formatStateUsing(fn($record) => 'موظف الإلتقاط : ' . $record->pick?->name)
                    ->description(fn($record) => 'موظف التسليم : ' . $record->given?->name)->label('التوكيل')->toggleable(isToggledHiddenByDefault: false),
                Tables\Columns\TextColumn::make('note')->label('ملاحظات')->color('primary')->toggleable(isToggledHiddenByDefault: false),



            ])
            ->paginated([10, 25, 50, 100 , 200 , 'all'])
            ->defaultSort('created_at', 'desc')
            ->filters([
                //

                Tables\Filters\Filter::make('created_at')
                    ->form([
                        Forms\Components\Select::make('branch_source_id')->relationship('branchSource', 'name')
                            ->label('اسم الفرع المرسل')->multiple(),
                        //H: added delivery employee filter to table
                        Forms\Components\Select::make('pick_id')
                            ->label('اسم موظف الإلتقاط')
                            ->options($users->pluck('name', 'id'))
                            ->multiple(),
                        Forms\Components\Select::make('given_id')
                            ->label('اسم موظف التسليم')
                            ->options($users->pluck('name', 'id'))
                            ->multiple(),


                        Forms\Components\Select::make('branch_target_id')->relationship('branchTarget', 'name')
                            ->label('اسم الفرع المستلم')->multiple(),

                        Forms\Components\Select::make('receive_id')->options($users->pluck('name', 'id'))->label('اسم المستلم')->multiple(),
                        Forms\Components\Select::make('sender_id')->options($users->pluck('name', 'id'))->label('اسم المرسل')->multiple(),
                        Forms\Components\Select::make('status')->options([
                            OrderStatusEnum::PENDING->value => OrderStatusEnum::PENDING->getLabel(),
                            OrderStatusEnum::AGREE->value => OrderStatusEnum::AGREE->getLabel(),
                            OrderStatusEnum::PICK->value => OrderStatusEnum::PICK->getLabel(),
                            OrderStatusEnum::TRANSFER->value => OrderStatusEnum::TRANSFER->getLabel(),
                            OrderStatusEnum::SUCCESS->value => OrderStatusEnum::SUCCESS->getLabel(),
                            OrderStatusEnum::RETURNED->value => OrderStatusEnum::RETURNED->getLabel(),
                            OrderStatusEnum::CANCELED->value => OrderStatusEnum::CANCELED->getLabel(),


                        ])->label('حالة الطلب')->multiple(),
                        Forms\Components\Select::make('area_source')->options(City::where('is_main', '=', 1)->pluck('name', 'id'))
                            ->label('من منطقة')->live(),
                        Forms\Components\Select::make('area_target')->options(City::where('is_main', '=', 1)->pluck('name', 'id'))
                            ->label('إلى منطقة')->live(),
                        Forms\Components\Select::make('city_source_id')->options($cities->pluck('name', 'id'))
                            ->label('من بلدة')->multiple(),
                        Forms\Components\Select::make('city_target_id')->options($cities->pluck('name', 'id'))
                            ->label('الى بلدة')->multiple(),

                        Forms\Components\DatePicker::make('created_from')->label('من تاريخ'),
                        Forms\Components\DatePicker::make('created_until')->label('الى تاريخ'),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['area_source'],
                                fn(Builder $query, $date): Builder => $query->whereHas('citySource', fn($query) => $query->where('cities.city_id', $date)),
                            )
                            ->when(
                                $data['area_target'],
                                fn(Builder $query, $date): Builder => $query->whereHas('cityTarget', fn($query) => $query->where('cities.city_id', $date)),
                            )
                            ->when(
                                $data['branch_target_id'],
                                fn(Builder $query, $date): Builder => $query->where('branch_target_id', $date),
                            )
                            ->when(
                                $data['branch_source_id'],
                                fn(Builder $query, $date): Builder => $query->where('branch_source_id', $date),
                            )
                            ->when(
                                $data['receive_id'],
                                fn(Builder $query, $date): Builder => $query->where('receive_id', $date),
                            )
                            ->when(
                                $data['sender_id'],
                                fn(Builder $query, $date): Builder => $query->where('sender_id', $date),
                            )
                            ->when(
                                $data['status'],
                                fn(Builder $query, $date): Builder => $query->where('status', $date),
                            )
                            ->when(
                                $data['city_target_id'],
                                fn(Builder $query, $date): Builder => $query->where('city_target_id', $date),
                            )
                            ->when(
                                $data['city_source_id'],
                                fn(Builder $query, $date): Builder => $query->where('city_source_id', $date),
                            )
                            ->when(
                                $data['created_from'],
                                fn(Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
                            )
                            ->when(
                                $data['created_until'],
                                fn(Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
                            )
                            //H: added the logic to quEry
                            ->when(
                                $data['pick_id'],
                                fn(Builder $query, $value): Builder => $query->where('pick_id', $value),
                            )
                            ->when(
                                $data['given_id'],
                                fn(Builder $query, $value): Builder => $query->where('given_id', $value),
                            );
                    })

            ])
            //->filtersFormMaxHeight('300px')
            ->actions([



                //                Tables\Actions\DeleteAction::make(),

            ])
            ->headerActions([
                ExportAction::make()->exports([
                    ExcelExport::make()->withChunkSize(100)->fromTable()
                ])
            ])
            ->bulkActions([]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCanceledOrders::route('/'),
            'create' => Pages\CreateCanceledOrder::route('/create'),
            'edit' => Pages\EditCanceledOrder::route('/{record}/edit'),
        ];
    }

    public static function getNavigationBadge(): ?string
    {
        return Cache::remember('navigation_badge_count_success_order', now()->addDay(), function () {
            return static::getModel()::where('status', OrderStatusEnum::SUCCESS)
            ->orWhere('status', OrderStatusEnum::CANCELED)
            ->orWhere('status', OrderStatusEnum::CONFIRM_RETURNED)
            ->count();
        });
    }
}
