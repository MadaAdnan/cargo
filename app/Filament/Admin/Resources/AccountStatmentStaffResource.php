<?php

namespace App\Filament\Admin\Resources;

use App\Enums\LevelUserEnum;
use App\Filament\Admin\Resources\AccountStatmentStaffResource\Pages;
use App\Filament\Admin\Resources\AccountStatmentStaffResource\RelationManagers;
use App\Models\AccountStatmentStaff;
use App\Models\Balance;
use App\Models\User;
use BezhanSalleh\FilamentShield\Contracts\HasShieldPermissions;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use pxlrbt\FilamentExcel\Actions\Tables\ExportAction;
use pxlrbt\FilamentExcel\Actions\Tables\ExportBulkAction;
use pxlrbt\FilamentExcel\Exports\ExcelExport;

class AccountStatmentStaffResource extends Resource implements HasShieldPermissions
{
    protected static ?string $model = Balance::class;

    public static function getPermissionPrefixes(): array
    {
        return [
            'view',
            'view_any',
            'create',
            'update',
            'delete',
            'delete_any',
            'publish'
        ];
    }

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';
    protected static ?string $navigationGroup = 'التقارير';

    //H: changed page label
    protected static ?string $pluralModelLabel = 'كشف حساب موظف';
    protected static ?string $label = 'كشف حساب موظف';
    protected static ?string $navigationLabel = 'كشف حساب موظف';
    protected static ?string $slug = 'account-statement-employee';

    public static function canAccess(): bool
    {
        return auth()->user()->hasPermissionTo('view_account::statment::staff');
        // TODO: Change the autogenerated stub
    }

    public static function canCreate(): bool
    {
        return auth()->user()->hasPermissionTo('view_account::statment::staff'); // TODO: Change the autogenerated stub
    }

    public static function canEdit(Model $record): bool
    {
        return auth()->user()->hasPermissionTo('update_account::statment::staff');
    }

    public static function canDelete(Model $record): bool
    {
        return auth()->user()->hasPermissionTo('delete_account::statment::staff');
    }

    public static function canDeleteAny(): bool
    {
        return auth()->user()->hasPermissionTo('delete_account::statment::staff');
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                //
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            //   ->poll(10)
            ->columns([

                Tables\Columns\TextColumn::make('credit')->label('مدين'),
                Tables\Columns\TextColumn::make('debit')->label('دائن'),
                Tables\Columns\TextColumn::make('currency.code')->label('العملة')->sortable(),

                Tables\Columns\TextColumn::make('info')->label('الملاحظات'),
                Tables\Columns\TextColumn::make('customer_name')->label('الطرف المقابل'),
                Tables\Columns\TextColumn::make('order.id')->description(fn($record) => $record->order?->code)->label('الطلب'),
                Tables\Columns\TextColumn::make('order.sender.name')->label('المرسل')->description(fn($record) => $record->order?->general_sender_name != null ? "{$record->order->general_sender_name}" : ""),
                Tables\Columns\TextColumn::make('order.receive.name')->label('المستلم')->description(fn($record) => $record->order?->global_name != null ? " {$record->order->global_name}" : ""),
                Tables\Columns\TextColumn::make('createdBy.name')->label('أنشئ بواسطة'),
                Tables\Columns\TextColumn::make('created_at')->date('Y-m-d')->description(fn($record) => $record->created_at->format('H:i'))
                    ->label('التاريخ والوقت'),

            ])->defaultSort('id', 'desc')
            //H: up here, added default sorting to table based on id to show the latest total of an account
            ->filters([
                Tables\Filters\SelectFilter::make('user_id')->options(User::where('level', LevelUserEnum::BRANCH->value)
                    ->orWhere('level', LevelUserEnum::STAFF->value)->orWhere('level', LevelUserEnum::ADMIN->value)->pluck('name', 'id'))
                    ->searchable()->label('المستخدم'),
                Tables\Filters\SelectFilter::make('currency_id')->options([
                    1 => 'دولار',
                    2 => 'تركي'
                ])->default(1)->label('العملة'),
                Tables\Filters\TernaryFilter::make('pending')->trueLabel('قيد التحصيل')->falseLabel('مكتمل')
                    ->queries(
                        true: fn($query) => $query->where('pending', true),
                        false: fn($query) => $query->where('pending', false),
                        blank: fn($query) => $query->where('pending', false)
                    )
            ])
            ->headerActions([
                ExportAction::make()->exports([
                    ExcelExport::make()->withChunkSize(100)->fromTable()
                ])
            ])
            ->actions([
                Tables\Actions\EditAction::make(),


            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                    ExportBulkAction::make()->exports([
                        ExcelExport::make()->withChunkSize(300)
                    ])
                ]),
            ]);
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListAccountStatmentStaff::route('/'),
            'create' => Pages\CreateAccountStatmentStaff::route('/create'),
            'edit' => Pages\EditAccountStatmentStaff::route('/{record}/edit'),
        ];
    }
}
