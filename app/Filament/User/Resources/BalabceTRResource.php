<?php

namespace App\Filament\User\Resources;

use App\Enums\ActivateStatusEnum;
use App\Enums\BalanceTypeEnum;
use App\Filament\User\Resources\BalabceTRResource\Pages;
use App\Filament\User\Resources\BalabceTRResource\RelationManagers;
use App\Models\BalabceTR;
use App\Models\Balance;
use App\Models\User;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class BalabceTRResource extends Resource
{
    protected static ?string $model = Balance::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';
    protected static ?string $navigationLabel = "الرصيد TRY";
    protected static ?string $navigationGroup = "الرصيد";
    protected static ?string $label = 'الرصيد TRY';
    protected static ?string $pluralLabel = 'الرصيد TRY';

    public static function canCreate(): bool
    {
        return false; // TODO: Change the autogenerated stub
    }

    public static function canEdit(Model $record): bool
    {
        return false; // TODO: Change the autogenerated stub
    }

    public static function canDelete(Model $record): bool
    {
        return false; // TODO: Change the autogenerated stub
    }

    public static function canDeleteAny(): bool
    {
        return false; // TODO: Change the autogenerated stub
    }

    public static function canAccess(): bool
    {
        if (auth()->user()->status == ActivateStatusEnum::ACTIVE)

            return true;

        else return false;


    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Placeholder::make('content')->dehydrated(false)->content('سيتم تحويل الرصيد من حسابك إلى حساب مستخدم آخر ولن تستطيع التراجع عن العملية'),
                Forms\Components\TextInput::make('debit')->label('قيمة الحوالة')->numeric()->gt(0),
                Forms\Components\TextInput::make('code')->label('رقم المستخدم الذي تريد التحويل له')

            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->modifyQueryUsing(fn($query)=>$query->where(['user_id' => auth()->id()])->where('currency_id',2)->latest())

            ->columns([
                Tables\Columns\TextColumn::make('credit')->label('ايداع'),
                Tables\Columns\TextColumn::make('debit')->label('سحب'),
                Tables\Columns\TextColumn::make('total')->label('الرصيد'),
                Tables\Columns\TextColumn::make('info')->label('الملاحظات'),
                Tables\Columns\TextColumn::make('created_at')->date('Y-m')->label('التاريخ'),
            ])
            ->filters([
                //
            ])
            ->headerActions([
                Tables\Actions\Action::make('transfer')
                    ->form([
                        Forms\Components\Placeholder::make('content')->dehydrated(false)->content('سيتم تحويل الرصيد من حسابك إلى حساب مستخدم آخر ولن تستطيع التراجع عن العملية'),
                        Forms\Components\TextInput::make('debit')->label('قيمة الحوالة')->numeric(),
                        Forms\Components\TextInput::make('code')->label('رقم المستخدم الذي تريد التحويل له')

                    ])
                    ->action(function ($data) {
                        $user = User::where('username', $data['code'])->first();
                        if (!$user) {
                            Notification::make('error')->title('فشل في العملية')
                                ->body('المستخدم غير موجود يرجى التحقق من رقم المستخدم')->danger()->send();
                            return;

                        }

                        if (auth()->user()->total_balance_tr < (float)$data['debit']) {
                            Notification::make('error')->title('فشل في العملية')
                                ->body('لا تملك رصيد كافي لتحويل المبلغ')->danger()->send();
                            return;

                        }
                        if (!isset($data['debit']) || (float)$data['debit'] <= 0) {
                            Notification::make('error')->title('فشل في العملية')
                                ->body('يرجى إدخال قيمة صالحة أكبر من 0')->danger()->send();
                            return;
                        }
                        \DB::beginTransaction();
                        try {
                            Balance::create([
                                'credit' => 0,
                                'debit' => $data['debit'],
                                'type' => BalanceTypeEnum::PUSH->value,
                                'is_complete' => 1,
                                'currency_id'=>2,
                                'info' => 'تحويل رصيد للمستخدم ' . $user->name,
                                'user_id' => auth()->id(),

                            ]);

                            Balance::create([
                                'credit' => $data['debit'],
                                'debit' => 0,
                                'type' => BalanceTypeEnum::CATCH->value,
                                'is_complete' => 1,
                                'info' => 'تحويل رصيد من المستخدم ' . auth()->user()->name,
                                'user_id' => $user->id,
                                'currency_id'=>2,
                            ]);
                            \DB::commit();
                            Notification::make('success')->title('نجاح العملية')
                                ->body('تم تحويل الرصيد بنجاح')->success()->send();
                        } catch (\Exception | \Error $e) {
                            \DB::rollBack();
                            Notification::make('error')->title('فشل في العملية')
                                ->body('خطأ غير متوقع ' . $e->getMessage())->danger()->send();
                        }
                    })->label('تحويل الرصيد'),
            ])
            ->actions([
               // Tables\Actions\EditAction::make(),
                Tables\Actions\Action::make('complete')->action(fn($record)=>$record->update(['is_complete'=>true]))->visible(fn($record)=>$record->is_complete)
                    ->label('تأكيد إستلام الدفعة')->requiresConfirmation(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    //Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListBalabceTRS::route('/'),
            'create' => Pages\CreateBalabceTR::route('/create'),
            'edit' => Pages\EditBalabceTR::route('/{record}/edit'),
        ];
    }
}
